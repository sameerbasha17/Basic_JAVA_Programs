/* 
----------------------------------------------------------------------------------------------------------------
Program No.   : 16
Program Title : Factorial of a Number
Author        : Shaik Sameer Basha
Date Created  : 26-Oct-2025
Last Modified : 26-Oct-2025
IDE Used      : VS Code
Path          : Top-100-Codes---PREP-INSTA/Method_1/Program16.java
-----------------------------------------------------------------------------------------------------------------

 â˜… PS     : Find the Factorial of a Number in Java.
 âœ© Input  : A number.
 âœ© Output : Print the factorial of given number.
------------------------------------------------------------------------------------------------------------------
*/

// factorial of n (n!) = 1 * 2 * 3 * 4....n

// import java.math.BigInteger;
import java.util.Scanner;
public class Program16 
{
    public static void main (String [] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a number : ");
        int number = sc.nextInt();

        if(number < 0)
        {
            System.out.println("We cannot find the factorial for negative number. Please enter a positive number !");
            sc.close();
            return;
        }
        
        System.out.println("The factorial of "+number + " is : "+factorial(number));

        sc.close();

    }

    
        static int factorial(int num)
    {
        if(num == 0)
            return 1;
        int fact = 1;


        for(int i = 1 ; i <=num; i++)
        {
            fact *=i;
        }

        return fact;
    }
}

/*
        static BigInteger factorial(int num)
        {
            if (num == 0)
                return BigInteger.ONE;
            
                BigInteger fact = BigInteger.ONE;
            for(int i = 1 ; i <= num ; i++)
            {
                fact = fact.multiply(BigInteger.valueOf(i));
            }

            return fact;
            
        }
    

*/


/* Output :
===========
Case - 1 :
----------
Enter a number : 
9
The factorial of 9 is : 362880

Case - 2 :
----------
Enter a number : 
-7
We cannot find the factorial for negative number. Please enter a positive number !

Case - 3 :
----------
Enter a number : 
0
The factorial of 0 is : 1

Case - 4 :
----------
Enter a number : 
1
The factorial of 1 is : 1

Case - 5 :
----------
Enter a number : 
17
The factorial of 17 is : -288522240   //since the int range is overflows
*/

/* My observation :
===================
works well. I am created a funtion & called it in main method and used a for loop...


Improvement :
=============
In the commented block of code, i have used BigInteger which is a class in java.math package to overcome the drawback in primitive data types(limited range of values).
Through this program i understand and learnt how to use BigInteger.

TEST CASES USING BigInteger :
-----------------------------
CASE - 1 :
-----------
Enter a number : 
17
The factorial of 17 is : 355687428096000

CASE - 2 :
----------
Enter a number : 
1000
The factorial of 1000 is : 402387260077093773543702433923003985719374864210714632543799910429938512398629020592044208486969404800479988610197196058631666872994808558901323829669944590997424504087073759918823627727188732519779505950995276120874975462497043601418278094646496291056393887437886487337119181045825783647849977012476632889835955735432513185323958463075557409114262417474349347553428646576611667797396668820291207379143853719588249808126867838374559731746136085379534524221586593201928090878297308431392844403281231558611036976801357304216168747609675871348312025478589320767169132448426236131412508780208000261683151027341827977704784635868170164365024153691398281264810213092761244896359928705114964975419909342221566832572080821333186116811553615836546984046708975602900950537616475847728421889679646244945160765353408198901385442487984959953319101723355556602139450399736280750137837615307127761926849034352625200015888535147331611702103968175921510907788019393178114194545257223865541461062892187960223838971476088506276862967146674697562911234082439208160153780889893964518263243671616762179168909779911903754031274622289988005195444414282012187361745992642956581746628302955570299024324153181617210465832036786906117260158783520751516284225540265170483304226143974286933061690897968482590125458327168226458066526769958652682272807075781391858178889652208164348344825993266043367660176999612831860788386150279465955131156552036093988180612138558600301435694527224206344631797460594682573103790084024432438465657245014402821885252470935190620929023136493273497565513958720559654228749774011413346962715422845862377387538230483865688976461927383814900140767310446640259899490222221765904339901886018566526485061799702356193897017860040811889729918311021171229845901641921068884387121855646124960798722908519296819372388642614839657382291123125024186649353143970137428531926649875337218940694281434118520158014123344828015051399694290153483077644569099073152433278288269864602789864321139083506217095002597389863554277196742822248757586765752344220207573630569498825087968928162753848863396909959826280956121450994871701244516461260379029309120889086942028510640182154399457156805941872748998094254742173582401063677404595741785160829230135358081840096996372524230560855903700624271243416909004153690105933983835777939410970027753472000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  // too long haðŸ˜…ðŸ˜…

*/

